{
  "config_version": "0.0.1",
  "branch_master": "master",
  "branch_develop": "develop",
  "mainline_branches": [
    "${branch_develop}",
    "it",
    "alpha",
    "beta",
    "${branch_master}"
  ],
  "autopush_remotes": true,
  "remote_name": "origin",
  "flow_commands": [
    {
      "bug": {
        "workflow": "cmdGeneric",
        "srcBranch": "${branch_develop}"
      }
    },
    {
      "feature": {
        "workflow": "cmdGeneric",
        "srcBranch": "${branch_develop}"
      }
    },
    {
      "support": {
        "workflow": "cmdGeneric",
        "srcBranch": "${branch_develop}"
      }
    },
    {
      "hotfix": {
        "workflow": "hotfix",
        "srcBranch": "${branch_master}"
      }
    },
    {
      "release": {
        "workflow": "release",
        "srcBranch": "${branch_master}"
      }
    }
  ],
  "_comment": "git flow support start [-F] <version> <base>",
  "workflows": [
    {
      "gup": {
        "description": "This is the gup that does a fetch/rebase instead of a pull",
        "default": {
          "steps": [
            {
              "step1": {
                "transition": "transGup()"
              }
            }
          ]
        }
      }
    },
    {
      "cmdGeneric": {
        "description": "This is the first",
        "start": {
          "options": {
            "-F": "Do a fetch before starting the new branch"
          },
          "arguments": [{
                "arg": "branch",
                "description": "name of the branch to start",
                "optional": false
            }, {
                "arg": "base",
                "description": "Override the default branch with this one",
                "default_value": "${branch_develop}",
                "optional": true
            }],
          "usageHelp": "git flow ${command_name} start [-F] <branch> [<base>]",
          "steps": [
            {
              "step1": {
                "conditions": [
                  "condIsClean(valid=true, critical=false, untracked_files=true)"
                ],
                "transition": "transGup()"
              },
              "step2": {
                "conditions": [
                  "condBranchExist(valid=true, critical=false)"
                ],
                "transition": "transCreateBranch()"
              },
              "step3": {
                "conditions": [
                  "condPushRemote(valid=true, critical=true)"
                ],
                "condFailNext": "transFinish()",
                "transition": "transPushToRemote(push <remote-name> <branch-name>)"
              }
            }
          ]
        },
        "next": {
          "usageHelp": "git flow ${command_name} next <branch>",
          "arguments": [{
                "arg": "branch",
                "description": "The name of the branch to step next (the branch prefix is optional",
                "optional": false
            }],
          "steps": [
            {
              "step1": {
                "conditions": [
                  "condDefault()",
                  "condIsNextMaster(valid=true, critical=true)"
                ],
                "transition": "transMergeBranch(startBranch=${branch_develop})"
              },
              "step2": {
                "transition": "transMergeBranch(mergeInto=${branch_next})"
              },
              "step3": {
                "transition": "transGitCommand(git=checkout -b {1} branch_develop)"
              },
              "step4": {
                "transition": "transDeleteBranch(targetBranch=branch)"
              },
              "step5": {
                "transition": "transPushToRemote(git=push <remote-name> <branch-name>)"
              }
            }
          ]
        }
      }
    },
    {
      "hotfix": {
        "start": {
          "steps": [
            {
              "step1": {
                "transition": "transGup"
              },
              "step2": {
                "conditions": [
                  "condBranchExist(valid=true, critical=false)"
                ],
                "transition": "transCreateBranch(git=checkout -b {1} branch_develop)"
              },
              "step3": {
                "conditions": [
                  "condPushRemote(valid=true, critical=true)"
                ],
                "transition": "transPushToRemote(git=push <remote-name> <branch-name>)"
              }
            }
          ]
        },
        "finish": {
          "steps": [
            {
              "step1": {
                "transition": "transMergeBranch()"
              },
              "step2": {
                "transition": "transGitCommand(git=checkout -b {1} branch_develop)"
              },
              "step3": {
                "transition": "transDeleteBranch(targetBranch=branch)"
              },
              "step4": {
                "transition": "transPushToRemote(git=push <remote-name> <branch-name>)"
              }
            }
          ]
        }
      }
    },
    {
      "release": {
        "description": "This creates releases to move groups thru the workflows",
        "start": {
          "steps": [
            {
              "step1": {
                "transition": "transGitCommand(git=checkout -b release-1.2 develop)"
              }
            }
          ]
        }
      }
    }
  ]
}